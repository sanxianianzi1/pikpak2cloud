name: Aria2本地下载
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Folder:
        description: '保存目录'
        required: true
        default: 'downloads'

jobs:
  Aria2-Download:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      
      - name: Install Dependencies
        run: |
          sudo apt install -y aria2 rar python3
          python -m pip install --upgrade pip wheel
          pip install SQLAlchemy psycopg2-binary

      - name: Create Scripts
        run: |
          # 创建 task.py
          cat > task.py << 'EOL'
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.sql import func
import argparse

parser = argparse.ArgumentParser(description="操作数据库")
parser.add_argument("--opt", help="操作", default="query")
parser.add_argument("--con", help="数据库链接地址", default="")
parser.add_argument("--name", help="文件名称", default="")

args = parser.parse_args()

Base = declarative_base()

class Task(Base):
    __tablename__ = "task"
    id = Column(Integer, unique=True, primary_key=True)
    status = Column(String, index=True)
    sort = Column(Integer)
    date_created = Column(DateTime(timezone=True), server_default=func.now())
    url = Column(String)

def find_one_and_update():
    engine = create_engine(args.con, echo=False)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    task = session.query(Task).filter(Task.status == "draft").first()
    if task:
        task.status = "published"
        session.commit()
        print(task.url)
    session.close()

def delete_task():
    engine = create_engine(args.con, echo=False)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    keyword = "##" + args.name
    task = session.query(Task).filter(Task.url.like(f"%{keyword}")).first()
    if task:
        session.delete(task)
        session.commit()
    session.close()

if __name__ == "__main__":
    if args.opt == "query":
        find_one_and_update()
    elif args.opt == "delete":
        delete_task()
EOL

          # 创建 process_links.py
          cat > process_links.py << 'EOL'
import re
import sys

def process_links(input_links):
    # 删除指定的前缀
    cleaned_links = re.sub(r'https://pikpak\d\.sanxianianzi\d*\.ggff\.net/', '', input_links)
    # 分割链接并过滤掉空行
    links = [link.strip() for link in cleaned_links.split('https://vod-jo-') if link.strip()]
    # 添加前缀并准备输出
    formatted_links = [f'https://vod-jo-{link}' for link in links]
    return formatted_links

def main():
    if len(sys.argv) != 2:
        print("Usage: python process_links.py <input_file>")
        sys.exit(1)

    input_file = sys.argv[1]
    try:
        with open(input_file, 'r', encoding='utf-8') as file:
            input_links = file.read()
        formatted_links = process_links(input_links)
        with open('urls.txt', 'w', encoding='utf-8') as file:
            file.write('\n'.join(formatted_links))
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
EOL

          # 创建 deal_download_files.py
          cat > deal_download_files.py << 'EOL'
import os
import shutil

def process_files():
    downloads_dir = 'downloads'
    result_dir = 'result'
    
    if not os.path.exists(result_dir):
        os.makedirs(result_dir)
    
    for filename in os.listdir(downloads_dir):
        src_path = os.path.join(downloads_dir, filename)
        dst_path = os.path.join(result_dir, filename)
        shutil.move(src_path, dst_path)

if __name__ == "__main__":
    process_files()
EOL
          
      - name: Downloading
        id: downloading
        run: |
          # 从数据库获取链接并保存到文件
          python task.py --opt="query" --con="${{ secrets.DB_CONNECT }}" > input_links.txt
          if [ ! -s input_links.txt ]; then
            echo "No links found in database"
            exit 1
          fi
          
          # 处理链接
          python process_links.py input_links.txt
          if [ ! -s urls.txt ]; then
            echo "No valid links after processing"
            exit 1
          fi
          
          # 下载文件
          mkdir -p ${{ github.event.inputs.Folder }}
          while IFS= read -r url; do
            if [[ -z "$url" ]]; then continue; fi
            filename=${url##*##}
            downloadurl=${url%##*}
            echo "path=${{ github.event.inputs.Folder }}/$filename" >> $GITHUB_ENV
            aria2c --seed-time=0 -d ${{ github.event.inputs.Folder }} -c "$downloadurl" -o "$filename"
          done < urls.txt
          
      - name: Process Downloaded Files
        run: |
          python ./deal_download_files.py

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: env.path != '' && !cancelled() && !failure()
        with:
          name: downloaded-files
          path: result/*
        
      - name: Create Release
        uses: marvinpinto/action-automatic-releases@latest
        if: env.path != '' && !cancelled() && !failure()
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ github.run_id }}
          prerelease: false
          title: "Release ${{ github.run_id }}"
          files: |
            result/*

      - name: Save Data
        id: database
        if: env.path != '' && !cancelled() && !failure()
        run: |
          filename=$(basename "${{ env.path }}")
          python task.py --opt="delete" --con="${{ secrets.DB_CONNECT }}" --name="$filename"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
