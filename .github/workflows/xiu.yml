name: Aria2本地下载
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Folder:
        description: '保存目录'
        required: true
        default: 'downloads'

jobs:
  Aria2-Download:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      
      - name: Install Dependencies
        run: |
          sudo apt install -y aria2 rar python3
          python -m pip install --upgrade pip wheel
          pip install SQLAlchemy psycopg2-binary

      - name: Create task.py
        run: |
          cat << 'EOF' > task.py
          from sqlalchemy import create_engine, Column, Integer, String, DateTime
          from sqlalchemy.orm import sessionmaker, declarative_base
          from sqlalchemy.sql import func
          import argparse
          import sys
          import os

          parser = argparse.ArgumentParser(description="操作数据库")
          parser.add_argument("--opt", help="操作", default="query")
          parser.add_argument("--con", help="数据库链接地址", default="")
          parser.add_argument("--name", help="文件名称", default="")

          args = parser.parse_args()

          Base = declarative_base()

          class Task(Base):
              __tablename__ = "task"
              id = Column(Integer, unique=True, primary_key=True)
              status = Column(String, index=True)
              sort = Column(Integer)
              date_created = Column(DateTime(timezone=True), server_default=func.now())
              url = Column(String)

          def find_one_and_update():
              engine = create_engine(args.con, echo=False)
              Session = sessionmaker(bind=engine)
              session = Session()
              
              task = session.query(Task).filter(Task.status == "draft").first()
              if task:
                  task.status = "published"
                  session.commit()
                  # 解析URL和文件名
                  url_parts = task.url.split("##")
                  if len(url_parts) == 2:
                      url, filename = url_parts
                      # 创建下载目录
                      os.makedirs("downloads", exist_ok=True)
                      # 使用aria2下载
                      os.system(f'aria2c --seed-time=0 -d downloads -c "{url}" -o "{filename}"')
              session.close()

          def delete_task():
              engine = create_engine(args.con, echo=False)
              Session = sessionmaker(bind=engine)
              session = Session()
              
              keyword = "##" + args.name
              task = session.query(Task).filter(Task.url.like(f"%{keyword}")).first()
              if task:
                  session.delete(task)
                  session.commit()
              session.close()

          if __name__ == "__main__":
              if args.opt == "query":
                  find_one_and_update()
              elif args.opt == "delete":
                  delete_task()
          EOF
          
      - name: Downloading
        id: downloading
        run: |
          mkdir -p downloads
          python task.py --opt="query" --con="${{ secrets.DB_CONNECT }}"
          filename=$(ls downloads | head -n1)
          if [ -n "$filename" ]; then
            echo "path=downloads/$filename" >> $GITHUB_OUTPUT
            echo "filename=$filename" >> $GITHUB_OUTPUT
            size=$(ls -l downloads/$filename | awk '{print $5}' )
            echo "size=$size" >> $GITHUB_OUTPUT
          fi
          
      - name: Process Downloaded Files
        if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
        run: |
          mkdir -p result
          mv downloads/* result/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
        with:
          name: downloaded-files
          path: result/*
        
      - name: Create Release
        uses: marvinpinto/action-automatic-releases@latest
        if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ github.run_id }}
          prerelease: false
          title: "Release ${{ github.run_id }}"
          files: |
            result/*

      - name: Save Data
        id: database
        if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
        run: |
          python task.py --opt="delete" --con="${{ secrets.DB_CONNECT }}" --name="${{ steps.downloading.outputs.filename }}"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
