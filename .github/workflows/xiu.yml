name: Aria2本地下载
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Folder:
        description: '保存目录'
        required: true
        default: 'downloads'

jobs:
  Aria2-Download:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      
      - name: Install Dependencies
        run: |
          sudo apt install -y aria2 rar python3
          python -m pip install --upgrade pip wheel
          pip install SQLAlchemy psycopg2-binary
          
      - name: Downloading
        id: downloading
        run: |
          # 从数据库获取链接并保存到文件
          python task.py --opt="query" --con="${{ secrets.DB_CONNECT }}" > input_links.txt
          if [ ! -s input_links.txt ]; then
            echo "No links found in database"
            exit 1
          fi
          
          # 处理链接
          python process_links.py input_links.txt
          if [ ! -s urls.txt ]; then
            echo "No valid links after processing"
            exit 1
          fi
          
          # 下载文件
          mkdir -p ${{ github.event.inputs.Folder }}
          while IFS= read -r url; do
            if [[ -z "$url" ]]; then continue; fi
            filename=${url##*##}
            downloadurl=${url%##*}
            echo "path=${{ github.event.inputs.Folder }}/$filename" >> $GITHUB_ENV
            aria2c --seed-time=0 -d ${{ github.event.inputs.Folder }} -c "$downloadurl" -o "$filename"
          done < urls.txt
          
      - name: Process Downloaded Files
        run: |
          python ./deal_download_files.py

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: env.path != '' && !cancelled() && !failure()
        with:
          name: downloaded-files
          path: result/*
        
      - name: Create Release
        uses: marvinpinto/action-automatic-releases@latest
        if: env.path != '' && !cancelled() && !failure()
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ github.run_id }}
          prerelease: false
          title: "Release ${{ github.run_id }}"
          files: |
            result/*

      - name: Save Data
        id: database
        if: env.path != '' && !cancelled() && !failure()
        run: |
          filename=$(basename "${{ env.path }}")
          python task.py --opt="delete" --con="${{ secrets.DB_CONNECT }}" --name="$filename"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
